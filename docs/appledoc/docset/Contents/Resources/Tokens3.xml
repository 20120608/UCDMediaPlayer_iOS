<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/UVAbstractLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/UVAbstractLogger</TokenIdentifier>
			<Abstract type="html">The UVLogger protocol specifies that an optional formatter can be added to a logger.
Most (but not all) loggers will want to support formatters.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/setLogFormatter:</TokenIdentifier>
			<Abstract type="html">Formatters may optionally be added to any logger.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;UVLogFormatter&gt; logFormatter</Declaration>
			
			
			<Anchor>//api/name/logFormatter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/logFormatter</TokenIdentifier>
			<Abstract type="html">Formatters may optionally be added to any logger.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;UVLogFormatter&gt; logFormatter</Declaration>
			
			
			<Anchor>//api/name/logFormatter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVAbstractLogger/logFormatter</TokenIdentifier>
			<Abstract type="html">Formatters may optionally be added to any logger.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;UVLogFormatter&gt; logFormatter</Declaration>
			
			
			<Anchor>//api/name/logFormatter</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/setLoggerQueue:</TokenIdentifier>
			<Abstract type="html">Each logger is executed concurrently with respect to the other loggers.
Thus, a dedicated dispatch queue is used for each logger.
Logger implementations may optionally choose to provide their own dispatch queue.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, DISPATCH_QUEUE_REFERENCE_TYPE) dispatch_queue_t loggerQueue</Declaration>
			
			
			<Anchor>//api/name/loggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/loggerQueue</TokenIdentifier>
			<Abstract type="html">Each logger is executed concurrently with respect to the other loggers.
Thus, a dedicated dispatch queue is used for each logger.
Logger implementations may optionally choose to provide their own dispatch queue.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, DISPATCH_QUEUE_REFERENCE_TYPE) dispatch_queue_t loggerQueue</Declaration>
			
			
			<Anchor>//api/name/loggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVAbstractLogger/loggerQueue</TokenIdentifier>
			<Abstract type="html">Each logger is executed concurrently with respect to the other loggers.
Thus, a dedicated dispatch queue is used for each logger.
Logger implementations may optionally choose to provide their own dispatch queue.</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, DISPATCH_QUEUE_REFERENCE_TYPE) dispatch_queue_t loggerQueue</Declaration>
			
			
			<Anchor>//api/name/loggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/setOnGlobalLoggingQueue:</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses a global queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnGlobalLoggingQueue) BOOL onGlobalLoggingQueue</Declaration>
			
			
			<Anchor>//api/name/onGlobalLoggingQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/isOnGlobalLoggingQueue</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses a global queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnGlobalLoggingQueue) BOOL onGlobalLoggingQueue</Declaration>
			
			
			<Anchor>//api/name/onGlobalLoggingQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVAbstractLogger/onGlobalLoggingQueue</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses a global queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnGlobalLoggingQueue) BOOL onGlobalLoggingQueue</Declaration>
			
			
			<Anchor>//api/name/onGlobalLoggingQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/setOnInternalLoggerQueue:</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses the internal designated queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnInternalLoggerQueue) BOOL onInternalLoggerQueue</Declaration>
			
			
			<Anchor>//api/name/onInternalLoggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVAbstractLogger/isOnInternalLoggerQueue</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses the internal designated queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnInternalLoggerQueue) BOOL onInternalLoggerQueue</Declaration>
			
			
			<Anchor>//api/name/onInternalLoggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVAbstractLogger/onInternalLoggerQueue</TokenIdentifier>
			<Abstract type="html">Return YES if the current logger uses the internal designated queue for logging</Abstract>
			<DeclaredIn>UVLog.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isOnInternalLoggerQueue) BOOL onInternalLoggerQueue</Declaration>
			
			
			<Anchor>//api/name/onInternalLoggerQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>