<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/UVFileLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/UVFileLogger</TokenIdentifier>
			<Abstract type="html">The standard implementation for a file logger</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/init</TokenIdentifier>
			<Abstract type="html">Default initializer</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/initWithLogFileManager:</TokenIdentifier>
			<Abstract type="html">Designated initializer, requires a UVLogFileManager instance</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithLogFileManager:(id&lt;UVLogFileManager&gt;)logFileManager</Declaration>
			
			
			<Anchor>//api/name/initWithLogFileManager:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/willLogMessage</TokenIdentifier>
			<Abstract type="html">Called when the logger is about to write message. Call super before your implementation.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (void)willLogMessage</Declaration>
			
			
			<Anchor>//api/name/willLogMessage</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/didLogMessage</TokenIdentifier>
			<Abstract type="html">Called when the logger wrote message. Call super after your implementation.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (void)didLogMessage</Declaration>
			
			
			<Anchor>//api/name/didLogMessage</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/shouldArchiveRecentLogFileInfo:</TokenIdentifier>
			<Abstract type="html">Called when the logger checks archive or not current log file.
Override this method to exdend standart behavior. By default returns NO.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (BOOL)shouldArchiveRecentLogFileInfo:(UVLogFileInfo *)recentLogFileInfo</Declaration>
			
			
			<Anchor>//api/name/shouldArchiveRecentLogFileInfo:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setMaximumFileSize:</TokenIdentifier>
			<Abstract type="html">Log File Rolling:</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) unsigned long long maximumFileSize</Declaration>
			
			
			<Anchor>//api/name/maximumFileSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/maximumFileSize</TokenIdentifier>
			<Abstract type="html">Log File Rolling:</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) unsigned long long maximumFileSize</Declaration>
			
			
			<Anchor>//api/name/maximumFileSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/maximumFileSize</TokenIdentifier>
			<Abstract type="html">Log File Rolling:</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) unsigned long long maximumFileSize</Declaration>
			
			
			<Anchor>//api/name/maximumFileSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setRollingFrequency:</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) NSTimeInterval rollingFrequency</Declaration>
			
			
			<Anchor>//api/name/rollingFrequency</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/rollingFrequency</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) NSTimeInterval rollingFrequency</Declaration>
			
			
			<Anchor>//api/name/rollingFrequency</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/rollingFrequency</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign) NSTimeInterval rollingFrequency</Declaration>
			
			
			<Anchor>//api/name/rollingFrequency</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setDoNotReuseLogFiles:</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign, atomic) BOOL doNotReuseLogFiles</Declaration>
			
			
			<Anchor>//api/name/doNotReuseLogFiles</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/doNotReuseLogFiles</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign, atomic) BOOL doNotReuseLogFiles</Declaration>
			
			
			<Anchor>//api/name/doNotReuseLogFiles</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/doNotReuseLogFiles</TokenIdentifier>
			<Abstract type="html">See description for maximumFileSize</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (readwrite, assign, atomic) BOOL doNotReuseLogFiles</Declaration>
			
			
			<Anchor>//api/name/doNotReuseLogFiles</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setLogFileManager:</TokenIdentifier>
			<Abstract type="html">The UVLogFileManager instance can be used to retrieve the list of log files,
and configure the maximum number of archived log files to keep.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/UVLogFileManager</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (strong, nonatomic, readonly) id&lt;UVLogFileManager&gt; logFileManager</Declaration>
			
			
			<Anchor>//api/name/logFileManager</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/logFileManager</TokenIdentifier>
			<Abstract type="html">The UVLogFileManager instance can be used to retrieve the list of log files,
and configure the maximum number of archived log files to keep.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/UVLogFileManager</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (strong, nonatomic, readonly) id&lt;UVLogFileManager&gt; logFileManager</Declaration>
			
			
			<Anchor>//api/name/logFileManager</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/logFileManager</TokenIdentifier>
			<Abstract type="html">The UVLogFileManager instance can be used to retrieve the list of log files,
and configure the maximum number of archived log files to keep.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/UVLogFileManager</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (strong, nonatomic, readonly) id&lt;UVLogFileManager&gt; logFileManager</Declaration>
			
			
			<Anchor>//api/name/logFileManager</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setAutomaticallyAppendNewlineForCustomFormatters:</TokenIdentifier>
			<Abstract type="html">When using a custom formatter you can set the logMessage method not to append
\n character after each output. This allows for some greater flexibility with
custom formatters. Default value is YES.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL automaticallyAppendNewlineForCustomFormatters</Declaration>
			
			
			<Anchor>//api/name/automaticallyAppendNewlineForCustomFormatters</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/automaticallyAppendNewlineForCustomFormatters</TokenIdentifier>
			<Abstract type="html">When using a custom formatter you can set the logMessage method not to append
\n character after each output. This allows for some greater flexibility with
custom formatters. Default value is YES.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL automaticallyAppendNewlineForCustomFormatters</Declaration>
			
			
			<Anchor>//api/name/automaticallyAppendNewlineForCustomFormatters</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/automaticallyAppendNewlineForCustomFormatters</TokenIdentifier>
			<Abstract type="html">When using a custom formatter you can set the logMessage method not to append
\n character after each output. This allows for some greater flexibility with
custom formatters. Default value is YES.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL automaticallyAppendNewlineForCustomFormatters</Declaration>
			
			
			<Anchor>//api/name/automaticallyAppendNewlineForCustomFormatters</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/rollLogFileWithCompletionBlock:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">You can optionally force the current log file to be rolled with this method.
CompletionBlock will be called on main queue.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (void)rollLogFileWithCompletionBlock:(void ( ^ ) ( ))completionBlock NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/rollLogFileWithCompletionBlock:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/rollLogFile</TokenIdentifier>
			<Abstract type="html">Method is deprecated. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Use rollLogFileWithCompletionBlock: method instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>- (void)rollLogFile</Declaration>
			
			
			<Anchor>//api/name/rollLogFile</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/setCurrentLogFileInfo:</TokenIdentifier>
			<Abstract type="html">Returns the log file that should be used.
If there is an existing log file that is suitable,
within the constraints of maximumFileSize and rollingFrequency, then it is returned.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) UVLogFileInfo *currentLogFileInfo</Declaration>
			
			
			<Anchor>//api/name/currentLogFileInfo</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UVFileLogger/currentLogFileInfo</TokenIdentifier>
			<Abstract type="html">Returns the log file that should be used.
If there is an existing log file that is suitable,
within the constraints of maximumFileSize and rollingFrequency, then it is returned.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) UVLogFileInfo *currentLogFileInfo</Declaration>
			
			
			<Anchor>//api/name/currentLogFileInfo</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UVFileLogger/currentLogFileInfo</TokenIdentifier>
			<Abstract type="html">Returns the log file that should be used.
If there is an existing log file that is suitable,
within the constraints of maximumFileSize and rollingFrequency, then it is returned.</Abstract>
			<DeclaredIn>UVFileLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) UVLogFileInfo *currentLogFileInfo</Declaration>
			
			
			<Anchor>//api/name/currentLogFileInfo</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
        
	</File>
</Tokens>